% y50g89_081610_5/UnDirected
% .song.mat
    % Song data, sampled as 32kHz
% .spk
    % First column = cluster number (for each neuron, only a subset of
            % clusters are actual spikes - and the rest are just noise -
            % see e-mail from raghav)
    % Second column = spike time (seconds)
    
%     y50g89_081610160745.song.mat

goodclusts=[1 3 4 5 6 7]; % change this for each bird
prewinsong=30; % ms,for pitch quant
prewinspk=50; % add on prewinsong - so really 80ms
postwinspk=50;
ntlength=8000;
dirf('*.song.mat','batchsongs')
NFFT=1020;
note_cnt=0;avnote_cnt=0;fcnt=0;
ff=load_batchf('batchsongs');
eachind=0;
for ifn=1:length(ff)
    fn=ff(ifn).name(1:end-9);
    fnn=[fn,'.not.mat'];
    if (~exist(fnn,'file'))
        continue;
    end
    load(fnn)
    labels = lower(labels);
    labels(findstr(labels,'0'))='-';
    cmd=['load ' ff(ifn).name];
    eval(cmd);
% spikes
    fid=fopen(['Chan3_' fn '.spk']); % change chan prefix for each bird
    flsv=[];
    count=0;
    while (1)
        if (length(flsv)==0)
            fl = fgetl(fid);
        else
            fl = flsv;
            flsv=[];
        end
        if (~ischar(fl))
            break;
        end
        if length(fl)==0
            continue;
        end
        count=count+1;
        ind_neuron(count)=str2num(fl(1)); % cluster number
        spiketm(count)=str2num(fl(2:end)); % spike time (seconds)
    end

    dat=Song;
    allnts=unique(labels);
    for i=1:length(allnts) % for each note present in this song
        currnt=allnts(i);
        p=findstr(labels,currnt);
        for ii=1:length(p) % for each instance of that note in this song
            ton=onsets(p(ii))-prewinsong; % starting 30ms before syllable onset
            toff=offsets(p(ii));
            ti1=ceil((ton*1e-3)*Fs);
            ti2=ti1+ntlength;
            datt=dat(ti1:ti2);
            eachind=eachind+1;
            fv(eachind).nt=currnt; % What is the syllable label
            allntlbls(eachind)=currnt;
            fv(eachind).datt=datt;% What does song look like
            for iii=1:max(ind_neuron) % for each neuron/cluster
                eachspk=spiketm(ind_neuron==iii); % spike times
                spktmscurr=(eachspk(eachspkrealtime=windowingT(i,:)-16>(ton-prewinspk)*1e-3 & eachspk<(toff+postwinspk)*1e-3));
                spktmssyll=spktmscurr-ton*1e-3;
                fv(eachind).chan(iii).spiketms=spktmssyll; % relative to song data onset for that syllable, seconds
            end
        end
    end
end

diffntlbls=unique(allntlbls);
figure;hold on;
clear fvsub
for i=1:length(diffntlbls)
    fvsub(i).struc=fv(find(allntlbls==diffntlbls(i)));
end
% for each note, look at notes to choose FF window
for i=1:length(fvsub)
    clear fvsub(i).sonsv
    for k=1:length(fvsub(i).struc)
        datain=fvsub(i).struc(k).datt;
        N=1024;SAMPLING=Fs;sigma=32;OVERLAP=1020;
        %sonodvA program
        t=-N/2+1:N/2;
        sigma=(sigma/1000)*SAMPLING;
        %Gaussian and first derivative as windows.
        w=exp(-(t/sigma).^2);
        timebins=floor((length(data)-(N))/(N-OVERLAP))+1;
        freqbins=(N/2)+1;

        Nyquist=SAMPLING/2;
        step=Nyquist/freqbins; %This is the width (in ms) between bins.

        songram=zeros(freqbins,timebins);
        songram=abs(flipdim(spectrogram(datain,w,OVERLAP,N,SAMPLING),1)); %gaussian windowed spectrogram
        fvsub(i).sonsv(k,:,:)=songram;
    end
end
t=1/8:1/8:size(songram,2)/8; %ms
f=Fs/freqbins:Fs/freqbins:Fs;
% average spectrogram - choose good times
    figure;hold on;
    clear mmreshape
    for i=1:length(fvsub)
        mm=mean(fvsub(i).sonsv);
        mmreshape(i).data=permute(mm,[2,3,1]);
        subplot(1,5,i);imagesc(t,f(end:-1:1),mmreshape(i).data);syn;ylim([0 16e3])
    end
% choose based on avg spectrogram
    windowingFF(1,:)=[2200 3100];windowingFF(2,:)=[2200 3500];windowingFF(3,:)=[2200 3500];windowingFF(4,:)=[2100 3500];
    windowingT(1,:)=[30 60];windowingT(2,:)=[80 150];windowingT(3,:)=[70 190];windowingT(4,:)=[60 160];
    for i=1:length(windowingFF) % for each syllable
        Nyquist=SAMPLING/2;
        step=Nyquist/freqbins; %This is the width (in ms) between bins.
        mini=round(windowingFF(i,2)/step);
        maxi=round(windowingFF(i,1)/step);
        % for each rendition of that syllable
        for k=1:size(fvsub(i).sonsv,1)
            sonogram=permute(fvsub(i).sonsv(k,:,:),[2,3,1]);
            for currenttime_bin=1:size(sonogram,2)
                slice=sonogram(:,currenttime_bin); %power at each frequency for the current time bin
                Freqbinest(1)=0;
                minimum=freqbins-mini;
                maximum=freqbins-maxi;
                freq_window=slice(minimum:maximum);
                [Pow,Ind]=max(freq_window);
                % Interpolation--subtraction of 0.5 because we care about the
                % central frequency of the bin, not the upper boundary.
                if Ind==1 || Ind==length(freq_window)
                    Indest=Ind;
                else
                    Indest=pinterp([Ind-1;Ind;Ind+1], [freq_window(Ind-1);freq_window(Ind);freq_window(Ind+1)]);
                end
                Real_Index=minimum+Indest-1; % -1 to account for window;
                Freqbinest=(freqbins-Real_Index);
                freqbin_estimate(currenttime_bin)=Freqbinest;
            end
            fvsub(i).pitch_data(:,k)=freqbin_estimate*(Nyquist/(freqbins-1));
        end
    end
clear ptvalue
clear numspikes
ActualTwin(1,:)=[250 400];ActualTwin(2,:)=[550 900];ActualTwin(3,:)=[600 900];ActualTwin(4,:)=[800 1050];
for i=1:length(windowingFF) % for each distinct syllable
    realtime=windowingT(i,:)-16;
        for k=1:size(fvsub(i).sonsv,1) % for each rendition
            ptvalue(i).data(k)=median(fvsub(i).pitch_data(ActualTwin(i,1):ActualTwin(i,2),k));
            for kk=1:length(fvsub(1).struc(1).chan) % for each cluster
                mintm=realtime(1)-60; % beginning of premotor window
                maxtm=realtime(2)-20; % end of premotor window
                numspikes(i).data(k).chan(kk)=length(find(fvsub(1).struc(1).chan(kk).spiketms*1e3>mintm & fvsub(1).struc(1).chan(kk).spiketms*1e3<maxtm));
            end
        end
end

for i=1:length(windowingFF) % for each distinct syllable
    for kk=1:length(fvsub(1).struc(1).chan) % for each cluster
        clear a
        for k=1:size(fvsub(i).sonsv,1) % for each rendition
            a(k)=numspikes(i).data(k).chan(kk);
        end
            b=corrcoef(a,ptvalue(i).data);
            ccs(i,kk)=b(2);
            ccp(i,kk)=sum(a);
    end
end
