% PROBLEM 1
function spiketimes=simulatespiketrain(times,rates)
% Generate ISIs

i=0;
index=1;
% until you reach the end of your time window (t>tmax)
while index < length(times)
    i=i+1;
    r=exprnd(1);
    % Given your current time (t), how long must you wait for the next spike?
    % Calculate this by integrating the firing rate function from the
    % time of the previous spike until you get to an area > r
    j=0;
    % Keep integrating until you predict a spike or until you pass the
    % edges of the time domain of your rate function
    areaundercurve=0;
    while areaundercurve < r && index+j < length(times)
        j=j+1;
        areaundercurve=trapz(times(index:index+j),rates(index:index+j));
    end
    % This is the estimated time of the next spike
    index=index+j;
    spiketimes(i)=time1(index);
end

% PROBLEM 2
rate1=[];
time1=[0:0.001:199.999];
for i=1:100
    rate1=[rate1 rate];
end
spiketimes1=simulatespiketrain(time1,rate1);
% Correct all the times - remainder after division by 2 seconds
spiketimes1=rem(spiketimes1,2);


% Make PSTH
starting=0;
stopping=1.9999;
binsize=0.010;
% for each bin
for i=1:200
    binstart=binsize*(i-1);
    binend=binsize*i;
    bincount(i)=sum(spiketimes1>binstart & spiketimes1<binend);
end
figure;plot([0:0.01:1.999],bincount)
hold on;plot(time,rate,'r') 
% It looks pretty darn good.


% PROBLEM 3
function z=computeksstat(times,spiketimes,rates,binwidth)
lastspiketime=0;
% Integrate between adjacent spikes
for i=1:length(spiketimes)-1
    % Which part of the firing rate function is between the last spike and
    % the next spike?
    relevant_rates=rates(times >= spiketimes(i) & times < spiketimes(i+1));
    % Integrate over the relevant part of the firing rate:
    z(i)=trapz(relevant_rates)*binwidth;
end
%%%%%%%%%%%%%%%%
% Do it for data generated in problem 2 with the actual rate function
newtrials=[1 find(diff(spiketimes1)<0)+1 length(spiketimes1)];
% for each trial
z=[];
binwidth=0.001;
for i=1:100
    spikes=spiketimes1(newtrials(i):newtrials(i+1)-1);
    z=[z computeksstat(time,spikes,rate,binwidth)];
end
znew=1-exp(-z);
mean(z)=0.9374; % approximately one
figure;hist(znew)


% Do it for data generated with the PSTH with bin size 10ms (as above)
% Generate data with the PSTH
timenew=[0:0.01:1.99];
rate2=[];
time2=[0:0.01:199.99];
for i=1:100
    rate2=[rate2 bincount];  % bincount IS the PSTH 
end
spiketimes2=simulatespiketrain(time2,rate2);
% Correct all the times - remainder after division by 2 seconds
spiketimes2=rem(spiketimes2,2);
% Get the z-values
newtrials2=[1 find(diff(spiketimes2)<0)+1 length(spiketimes2)];
% for each trial
z2=[];
binwidth=0.01;
for i=1:100
    spikes2=spiketimes2(newtrials2(i):newtrials2(i+1)-1);
    z2=[z2 computeksstat(timenew,spikes2,bincount,binwidth)];
end
z2new=1-exp(-z2);
mean(z2)=0.8159; % less than a perfect fit
figure;hist(z2new)
% It does worse with a 20ms window
% This is because there are too many small ISIs (granularity is low)
% mean(z2)=0.73;
% corrcoef(z2(1:end)-1),z2(2:end))=-0.1

%%%
% Problem 4
function spiketimes=simulatespiketrainEXP(times,rates)
% Generate ISIs
i=0;
index=1;
% until you reach the end of your time window (t>tmax)
while index < length(times)
    i=i+1;
    r=exprnd(1);
    % Given your current time (t), how long must you wait for the next spike?
    % Calculate this by integrating the firing rate function from the
    % time of the previous spike until you get to an area > r
    j=0;
    % Keep integrating until you predict a spike or until you pass the
    % edges of the time domain of your rate function
    areaundercurve=0;
    while areaundercurve < r && index+j < length(times)
        j=j+1;
        refractoryperiodfactor(index:index+j)=exp(-0.002./(times(index:index+j)-times(index)));
        areaundercurve=trapz(times(index:index+j),rates(index:index+j).*refractoryperiodfactor(index:index+j));
    end
    % This is the estimated time of the next spike
    index=index+j;
    spiketimes(i)=times(index);
end
%%%%%%%%%%%%%%%%%%

spiketimes3=simulatespiketrainEXP(time2,rate2);
% Correct all the times - remainder after division by 2 seconds
spiketimes3=rem(spiketimes3,2);
% Make PSTH
starting=0;
stopping=1.9999;
binsize=0.010;
% for each bin
for i=1:200
    binstart=binsize*(i-1);
    binend=binsize*i;
    PSTH3(i)=sum(spiketimes3>binstart & spiketimes3<binend);
end
figure;plot([0:0.01:1.999],PSTH3)
hold on;plot(time,rate,'r') 



% Correct all the times - remainder after division by 2 seconds

newtrials3=[1 find(diff(spiketimes3)<0)+1 length(spiketimes3)];
% for each trial
z3=[];
binwidth=0.01;
for i=1:100
    spikes3=spiketimes3(newtrials3(i):newtrials3(i+1)-1);
    z3=[z3 computeksstat(timenew,spikes3,bincount,binwidth)];
end
z3new=1-exp(-z3);
mean(z3)=1.0550; % good fit
% A
figure;hist(z3new) % close to uniform
% B
figure;hold on;
getKSPlot(znew)
getKSPlot(z2new)
getKSPlot(z3new)

% Problem 5
%%% only thing that changes in the code is this:
refractoryperiodfactor(index:index+j)=exp(-0.002./(times(index:index+j)-times(index)));
burstingfactor(index:index+j)=(1+exp(2.5-((0.005-(times(index:index+j)-times(index)))/0.002).^2));
areaundercurve=trapz(times(index:index+j),rates(index:index+j).*refractoryperiodfactor(index:index+j).*burstingfactor(index:index+j));

spiketimes4=simulatespiketrainEXP(time2,rate2);
% Correct all the times - remainder after division by 2 seconds
spiketimes4=rem(spiketimes4,2);
% % Make PSTH
binsize=0.010;
% for each bin
for i=1:200
    binstart=binsize*(i-1);
    binend=binsize*i;
    PSTH4(i)=sum(spiketimes4>binstart & spiketimes4<binend);
end
figure;plot([0:0.01:1.999],PSTH4)
hold on;plot(time,rate,'r') 

newtrials4=[1 find(diff(spiketimes4)<0)+1 length(spiketimes4)];
% for each trial
z4=[];
binwidth=0.01;
for i=1:100
    spikes4=spiketimes4(newtrials4(i):newtrials4(i+1)-1);
    z4=[z4 computeksstat(timenew,spikes4,bincount,binwidth)];
end
z4new=1-exp(-z4);
mean(z4)=1.0476; % good fit

% A
figure;hist(z4new) % close to uniform
% B
figure;hold on;
getKSPlot(znew)
getKSPlot(z2new)
getKSPlot(z3new)



