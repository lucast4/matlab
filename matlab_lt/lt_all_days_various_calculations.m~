%% LT started 11/1/13 - calculating entropy, amplitude, sung fraction, using db_seq_func_day_save code
% 12/2013 - because of pretime and posttime for calcualting entropy (rel
% to onset and offset).  change for each bird and syllable. (see line 25)

% this goes through all day folders and takes labeled notes and does
% calcualtiones (which you determine), and then you ahve the option of
% plotting all days for each calculation.

% taken from the end of lt_db_contour...v4 on 11/18.

% 1/4/14 - renamed v2 from "EDIT" version, use this one instead of v1 (i.e.
% no version).
% 1/14/14 - added HIT rate calc. 

% clear all

%% input parameters
% curr_directory=pwd;
% cd ..; 
% one_dir_up=pwd; cd(curr_directory);
% 

% if strcmp(input('do you want to use previous parameters?','s'),'y')==1;
%     disp('go to all_days_various_calculations folder and load the parameters, then type return to return to script')
%     keyboard
%     
%     % re-assign the variables which were stored in a structure, but now need
%     % to be in single-variable form (not structure).
%     phrase=all_days_various.parameters.phrase;
%     nameofbird=all_days_various.parameters.nameofbird;
%     
%     days = all_days_various.parameters.days;
%     
%     omit = 0;
%     syllables=all_days_various.parameters.syllables;
%     
%     % ask what analysis you want to do.
%     seq_func_yes_or_no=all_days_various.parameters.questions.rendition_amount_yes_or_no;
%     rendition_amount_yes_or_no=all_days_various.parameters.questions.seq_func_yes_or_no;
%     plot_all_days_yes_or_no=all_days_various.parameters.questions.plot_all_days_yes_or_no;
%     get_all_vocalization_stats_yes_or_no=all_days_various.parameters.questions.get_all_vocalization_stats_yes_or_no;
%     mult_seq_yes_or_no=all_days_various.parameters.questions.mult_seq_yes_or_no;
%     findwnote2tw_yes_or_no=all_days_various.parameters.questions.findwnote2tw_yes_or_no;
%     
%     if strcmp(findwnote2tw_yes_or_no,'y')==1;
%         findwnote_syl=all_days_various.findwnote2tw.findwnote_syl;
%     end
%     
%     
%     if strcmp(mult_seq_yes_or_no,'y')==1;
%         num_tp=all_days_various.mult_seq_analy.num_tp;
%         tpofinterest=all_days_various.mult_seq_analy.tpofinterest;
%         con_or_div=all_days_various.mult_seq_analy.con_or_div;
%     end
%     
%     if seq_func_yes_or_no=='y'||rendition_amount_yes_or_no=='y';
%         syllables=all_days_various.parameters.syllables;
%     end
%     
% %     if seq_func_yes_or_no=='y';
% %         entropy_pretime=all_days_various.seq_func_day_save.entropy_pretime;
% %         entropy_posttime=all_days_various.seq_func_day_save.entropy_posttime;
% %     end
%     
%     if plot_all_days_yes_or_no=='y';
%         metrics=all_days_various.seq_func_day_save.metrics;
%     end
%     
%     
% else
    
%% IF YOU don't use previousyl saved params, then enter then anew.
phrase=input('what is your phase indexing the experiments? ','s');
curr_directory=pwd;
cd ..;
one_dir_up=pwd; cd(curr_directory);

[nameofbird]=lt_get_birdname_date_from_dir(0);
pwd;
%     bluejay_number=input('bluejay number? ');
    
    days{1} = input(['What is the first day for ' nameofbird '?\n(format should be day month year. i.e. 06Jun2012)    '], 's');
    days{3} = datenum(days{1});
    days{2} = input(['What is the last day for ' nameofbird '?\n(format should be day month year. i.e. 31Dec2013)   '], 's');
    days{4} = datenum(days{2});
    omit = 0;
    
    % ask what analysis you want to do.
    seq_func_yes_or_no=input('analyze spectral features (e.g. entropy)  (y or n? ', 's');
    rendition_amount_yes_or_no=input('calculate # of labeled songs and syl renditions for each day? ', 's');
    get_all_vocalization_stats_yes_or_no=input('perform lt_get_all_vocalization_stats? (i.e. get stats, such as duration, for each vocalization in batch (even unlabeled) ','s');
    mult_seq_yes_or_no=input('perform mult_seq_analysis on transitions? ','s');
%     findwnote2tw_yes_or_no=input('perform findwnote2tw (to get things like lables, onsets, offsets, etc) ? ', 's');
    triglabel_yes_or_no=input('perform triglabel to get WN hits, misses, for specific syls? ','s');
    change_syl_yes_or_no=input('change syl labels using db_change_syl_... ? ','s'); 
    get_labels_yes_or_no=input('perform lt_db_get_labels to get labels, onsets, offsets, time, for all syl? ','s');
    lt_get_transitions_yes_or_no=input('perform lt_get_all_transition... on each day? ','s');
    
    
    if strcmp(change_syl_yes_or_no,'y')==1;
        old_motif=input('old motif you want to change (e.g. ab). ', 's');
        new_motif=input('new motif to change it into (e.g. ac), ','s');
    end
    
    if strcmp(triglabel_yes_or_no,'y')==1;
        trig_syl=input('enter the syllables to check for WN hit rate (e.g. abc )','s');
    end
    
    % COMMENTED OUT (1/21/14) because forces you to choose syl, and the
    % number of occurence of that syl determines number of times that song
    % presented in data.
%     if strcmp(findwnote2tw_yes_or_no,'y')==1;
%         findwnote_syl=input('enter syl for findwnote2tw. enter any used syl, unless you are interested in stats for a specific syllable. ','s');
%     end 
    
    if strcmp(mult_seq_yes_or_no,'y')==1;
        num_tp=input('How many transition points?  ');
        for i = 1:num_tp;
            %asks for the name of the transition points
            tpofinterest{i} = input(['What is the name of transition #' num2str(i) '?  '], 's');
        end
        con_or_div=input('con or div transitions? (i.e. con or div)','s');

    end
    
    
    if seq_func_yes_or_no=='y';
        syllables_seq_func = input('what are the syllables for seq_func? (e.g. ab) ','s');
    end

    if rendition_amount_yes_or_no=='y';
        syllables_RendAmnt = input('what are the syllables for rendition amount analyses)? (e.g. ab) ','s');
    end

    
    if seq_func_yes_or_no=='y';
        %         for i=1:length(syllables);
        %             entropy_pretime.(syllables(i))= input(['pretime for entropy calculation for syllable ' ...
        %                 syllables(i) '? (i.e. 0.2 to start 0.2s before onset. negative # to start after onset) ']);
        %             entropy_posttime.(syllables(i))=input(['posttime for entropy calculation for syllable ' ...
        %                 syllables(i) '? (i.e. 0.2 to end 0.2s after onset.)']);
        %         end
        
        plot_all_days_yes_or_no=input('do you want to plot results for all days after calculations finish? (y or n) ', 's'); % do you want to plot all days after this is done?
        
        if plot_all_days_yes_or_no=='y';
            metrics=input('what metrics do you want to look at? (e.g. for multiple, {"entropy", "amplitude", "fraction", "timing"}. otherwise enter 1 to use those 4 ');
            if metrics==1;
                metrics={'entropy', 'amplitude', 'fraction', 'timing'};
            end
        end
    end
    % end
    
    %% FIRST, set up loop to go through every day with songs
    %finds the folder names to use
    song_folders = lt_db_list_song_folders(phrase, omit,...
        curr_directory);
    fid = fopen([curr_directory ...
    '/song_folders_' phrase '.txt'],'r');
folders = textscan(fid,'%s');
fclose(fid);

% %picks out only the folders within the dates specified
% folders{1} = folders{1}(find(datenum(song_folders) ==
% days{3}):find(datenum(song_folders) == days{4})); LT added, but no
% necessary
% 

%% SECOND, go through each day and calculate whatever you want

% prepare variables
if rendition_amount_yes_or_no=='y';
    syl_renditions=zeros(length(syllables_RendAmnt),days{4}-days{3});
    song_amount=[];
end

for j = days{3}:days{4};
    %     k = 1; % start folder iteration "clock" (will basically try all folders until finds one taht matches j. if none is found (i.e. k exceeds length), then go to next j.
    
    for k=1:length(song_folders);
        if j == datenum(song_folders(k));
            try
                cd([curr_directory '/' folders{1}{k}])
            catch err
                display([ datestr(j, 'ddmmmyyyy') ' is missing'])
                
                %                 %             if rendition_amount_yes_or_no=='y'
                %                 %                 jj=(j-days{3})+1; % make 1st day index 1, not the datenum.
                %                 %                 song_amount(jj)=nan;
                %                 %                 syl_renditions(i,jj)=nan; %for missed days we will not include in analysis.
                %                 %             end
                %                 k=k+1;
                %                 continue
                cd(curr_directory)
                break
            end
            %---------------------------------------
            % INSERT ANALYSIS STUFF FOR EACH DAY HERE
            
            % ONE, for each day analyze spectral features:
            if seq_func_yes_or_no=='y';
                for i=1:length(syllables_seq_func);
                    lt_db_seq_func_day_save_rd3gr35('batch.catch.keep','',nameofbird, datestr(j,'ddmmmyyyy'), 1, syllables_seq_func(i), phrase)
                    disp([ datestr(j, 'ddmmmyyyy') ' for ' syllables_seq_func(i) ' done']);
                end
            end
            
            % TWO, INSERT ANALYSIS HERE (PITCH WAVERINESS?)
            
            % THREE, STORE NUMBER OF RENDITIONS FOR EACH SYLLABLE
            if rendition_amount_yes_or_no=='y';
                for i=1:length(syllables_RendAmnt);
                    jj=(j-days{3})+1; % make 1st day index 1, not the datenum.
                    [song_amount(jj), syl_renditions(i,jj)]=lt_calc_syl_rendition_amount('batch.catch.keep',syllables_RendAmnt(i));
                end
            end
            
            % FOURTH, calculate the durations for each (even unlabeled) vocalization in the labeled songs.
            if strcmp(get_all_vocalization_stats_yes_or_no,'y')==1;
                jj=(j-days{3})+1; % make 1st day index 1, not the datenum.
                [durations_all_songs{jj}, durations_per_song{jj}]=lt_get_all_vocalization_stats('batch.catch.keep');
            end
            
%             % FIFTH, perform findwnote2tw
%             if strcmp(findwnote2tw_yes_or_no,'y')==1;
%                 jj=(j-days{3})+1;
%                 fvalsstr{jj}=findwnote2tw('all_cbin_not_mat',findwnote_syl,'',-0.016,[1000 3000],1024,0,'obs0');
%             end
%             
            % SIXTH, calculate transition stats
            if strcmp(mult_seq_yes_or_no,'y')==1;
                try
                    lt_db_mult_seq_analy_FUNCTION(one_dir_up,nameofbird,datestr(j, 'ddmmmyyyy'),phrase,'batch.catch.keep',num_tp,tpofinterest,con_or_div);
                    disp([ datestr(j, 'ddmmmyyyy') ' for mult_seq_analy done'])
                    close all; % close figures
                catch err
                    continue
                end
            end
            
            % SEVENTH, calculates WN hit rate
            if strcmp(triglabel_yes_or_no,'y')==1;
                for ii=1:length(trig_syl);
                    jj=(j-days{3})+1;
                    try
                        [vals{j}{ii}, trigs{j}{ii}]=triglabel('batch.catch.keep',trig_syl(ii),1,0,0,0);
                        trig_vals.(trig_syl(ii)){jj}=vals{j}{ii};
                        trig_trigs.(trig_syl(ii)){jj}=trigs{j}{ii};
                    catch err
                        disp([trig_syl(ii) 'had error for day ' datestr(j, 'ddmmmyyyy') '; skipped syl']);
                        continue
                    end
                end
            end
            % EIGHTH, changes syl labels
            
            if strcmp(change_syl_yes_or_no,'y')==1;
                try
                    db_change_syllable_in_batchfile('batch.catch.keep',old_motif,new_motif);
                    disp(['changing syl: ' datestr(j, 'ddmmmyyyy') ' done.'])
                catch err
                    disp(['changing syl: error for day ' datestr(j, 'ddmmmyyyy') '; skipped day']);
                    continue
                end
            end
            
            % NINTH, collect labels, onsets, offsets, and absolute times,
            % for all syllables.
            
            if strcmp(get_labels_yes_or_no,'y')==1;
                jj=(j-days{3})+1;
                disp([datestr(j,'ddmmmyyyy') '. lt_db_get_labels: gethering labels, onsets, etc, for all syl']);
                [syl{jj} time_syl{jj} filenames{jj} onsets_syl{jj} offsets_syl{jj}]=lt_db_get_labels('batch.catch.keep','n');
            end
            
            % TENTH, perform lt_get_all_transition...
            
            
            % AFTER DONE ITERATE ONE STEP IN LOOP
            cd(curr_directory)
            break
        else
            cd(curr_directory)
            continue
        end
    end
end

cd(curr_directory)
fprintf('done!\n')

%% saving variables

% FIRST, assign variables fields in one structure
all_days_various.parameters.phrase=phrase;
all_days_various.parameters.curr_directory=curr_directory;
all_days_various.parameters.nameofbird=nameofbird;
all_days_various.parameters.days=days;
all_days_various.parameters.time_of_analysis=lt_get_timestamp;

all_days_various.parameters.questions.seq_func_yes_or_no=seq_func_yes_or_no;
all_days_various.parameters.questions.rendition_amount_yes_or_no=rendition_amount_yes_or_no;
all_days_various.parameters.questions.get_all_vocalization_stats_yes_or_no=get_all_vocalization_stats_yes_or_no;
all_days_various.parameters.questions.mult_seq_yes_or_no=mult_seq_yes_or_no;
% all_days_various.parameters.questions.findwnote2tw_yes_or_no=findwnote2tw_yes_or_no;
all_days_various.parameters.questions.triglabel_yes_or_no=triglabel_yes_or_no;
all_days_various.parameters.questions.change_syl_yes_or_no=change_syl_yes_or_no;
all_days_various.parameters.questions.lt_db_get_labels=get_labels_yes_or_no;


things_analyzed=[];
things_analyzed_deep=['|']; % more information to log in text file


if strcmp(get_labels_yes_or_no,'y')==1;
    all_days_various.lt_db_get_labels.labels=syl;
    all_days_various.lt_db_get_labels.abs_time_syl=time_syl;
    all_days_various.lt_db_get_labels.filenames=filenames;
    all_days_various.lt_db_get_labels.onsets=onsets_syl;
    all_days_various.lt_db_get_labels.offsets=offsets_syl;
    things_analyzed=[things_analyzed '_GetLabels'];
    things_analyzed_deep=[things_analyzed_deep '_GetLabels_|'];
end


if strcmp(change_syl_yes_or_no,'y')==1;
    all_days_various.change_syl.old_motif=old_motif;
    all_days_various.change_syl.new_motif=new_motif;
    things_analyzed=[things_analyzed '_ChangedSyl'];
    things_analyzed_deep=[things_analyzed_deep '_ChangedSyl_' old_motif 'to' new_motif '_|'];
    
end


if strcmp(triglabel_yes_or_no,'y')==1;
    all_days_various.trig_label.vals=trig_vals;
    all_days_various.trig_label.trigs=trig_trigs;
    all_days_various.trig_label.trig_syl=trig_syl;
        things_analyzed=[things_analyzed '_TrigLabel'];
    things_analyzed_deep=[things_analyzed_deep '_TrigLabel_' trig_syl '_|'];

end


% if strcmp(findwnote2tw_yes_or_no,'y')==1;
%     all_days_various.findwnote2tw.findwnote_syl=findwnote_syl;
%     all_days_various.findwnote2tw.fvalsstr=fvalsstr;
%         things_analyzed=[things_analyzed '_findwnote2tw'];
%     things_analyzed_deep=[things_analyzed_deep '_findwnote2tw_' findwnote_syl '_|'];
% 
% end

if rendition_amount_yes_or_no=='y'
    all_days_various.syl_rendition_amount.song_amount=song_amount;
    all_days_various.syl_rendition_amount.syl_renditions=syl_renditions;
    all_days_various.syl_rendition_amount.syllables=syllables_RendAmnt;
        things_analyzed=[things_analyzed '_RenditionAmnt'];
    things_analyzed_deep=[things_analyzed_deep '_RenditionAmnt_' syllables_RendAmnt '_|'];

end

if seq_func_yes_or_no=='y'
    all_days_various.seq_func_day_save.syllables=syllables_seq_func;
    %     all_days_various.seq_func_day_save.metrics=metrics;
    all_days_various.parameters.questions.plot_all_days_yes_or_no=plot_all_days_yes_or_no;
    
    things_analyzed=[things_analyzed '_SeqFunc'];
    things_analyzed_deep=[things_analyzed_deep '_SeqFunc_' syllables_seq_func '_|'];
    %     for i=1:length(metrics);
    %         things_analyzed=[things_analyzed metrics{i}];
    %         things_analyzed_deep=[things_analyzed_deep metrics{i}];
    %     end
    %     things_analyzed_deep=[things_analyzed_deep '_' syllables_seq_func];
end


if strcmp(get_all_vocalization_stats_yes_or_no,'y')==1;
    all_days_various.get_all_vocalization_stats.durations_all_songs=durations_all_songs;
    all_days_various.get_all_vocalization_stats.durations_per_song=durations_per_song;
        things_analyzed=[things_analyzed '_AllVocalStats'];
        things_analyzed_deep=[things_analyzed_deep '_AllVocalizationStats_|'];

end

if strcmp(mult_seq_yes_or_no,'y')==1;
    all_days_various.mult_seq_analy.num_tp=num_tp;
    all_days_various.mult_seq_analy.tpofinterest=tpofinterest;
    all_days_various.mult_seq_analy.con_or_div=con_or_div;
    things_analyzed=[things_analyzed '_MultSeq'];
    things_analyzed_deep=[things_analyzed_deep '_MultSeq_'];
    for i=1:length(tpofinterest);
        things_analyzed_deep=[things_analyzed_deep tpofinterest{i} '_'];
        if i==length(tpofinterest);
            things_analyzed_deep=[things_analyzed_deep tpofinterest{i} '_|'];
        end
    end
end


%% SAVING
try cd('all_days_various_calculations')
catch error
    mkdir('all_days_various_calculations')
    cd('all_days_various_calculations')
end

% save(['all_days_various_' all_days_various.parameters.time_of_analysis '_' things_analyzed],'all_days_various')
save(['all_days_various_' all_days_various.parameters.time_of_analysis],'all_days_various')


% MAKES a note in a text file in the folder of 1) analyses compiled, 2) syl/motifs analyzed, 3) dates analyzed, 4) date of analysis (structure identifier)
log_note=[all_days_various.parameters.time_of_analysis '__|' things_analyzed_deep '|__' all_days_various.parameters.days{1} '_to_' all_days_various.parameters.days{2}];
fid=fopen('log.txt','a');
fprintf(fid,'%s \n \n',log_note);
fclose(fid);

cd(curr_directory)

%% Below is to compile all days' data and plot. DO NOT USE. USE lt_all_days_all_analysis instead.

if seq_func_yes_or_no=='y'
    if plot_all_days_yes_or_no=='y';
        lt_plot_all_days_spectral_features(metrics,all_days_various.parameters.curr_directory,all_days_various.parameters.phrase,...
            all_days_various.parameters.syllables)
    end
end

