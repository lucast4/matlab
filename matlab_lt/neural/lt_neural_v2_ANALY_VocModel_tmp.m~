function lt_neural_v2_ANALY_VocModel(SummaryStruct)
%% LT, 3/22/17 - use features for each vocalization to predict FR at various time bins

plotRaw = 0;

Pretime = 0.2; % to start getting binned data (rel to onset)
Posttime = 0.2; % to stop getting dat (rel to onset);
Binsize = 0.025; % for getting spike counts
mindattoplot = 5; % min N for a given category.

assert(mod(Pretime, Binsize)==0 && mod(Posttime, Binsize)==0, 'pre/post time not mulitple of binsize...');

%% temporary
lt_figure; hold on;

%%

Numbirds = length(SummaryStruct.birds);
for z = 1:Numbirds
    Numneurons = length(SummaryStruct.birds(z).neurons);
    for zz = 1:Numneurons
        
        datstruct = SummaryStruct.birds(z).neurons(zz);
        
        % ==================== EXTRACT
        cd(datstruct.dirname);
        
        % load dat for neuron
        cd ..
        batchf = datstruct.batchfilename;
        chan = datstruct.channel;
        [SongDat, NeurDat, Params] = lt_neural_ExtractDat(batchf, chan);
        
        %%
        
        % go thru all vocalizations, for each, extract data
        tic
        counter = 0;
        numsyls = length(SongDat.AllLabels);
        VOCALSTRUCT = struct;
        for j=1:numsyls
            syl=SongDat.AllLabels(j);
            
            % ------ skip if is blank
            if strcmp(syl, '-')
                continue
            end
            
            % ----- sequence information
            if j>10
                pre_ten_syls=SongDat.AllLabels(j-10:j-1);
            elseif j>1
                pre_ten_syls=SongDat.AllLabels(1:j-1);
            else
                pre_ten_syls = nan;
            end
            if length(SongDat.AllLabels)>j+9
                post_ten_syls=SongDat.AllLabels(j+1:j+10);
            elseif length(SongDat.AllLabels)>j
                post_ten_syls=SongDat.AllLabels(j+1:end);
            else
                post_ten_syls = nan;
            end
            
            presyl = pre_ten_syls(end);
            postsyl = post_ten_syls(1);
            
            % -- syl dur
            Syldur = SongDat.AllOffsets(j)-SongDat.AllOnsets(j);
            
            % ---- gap information\
            Gapdur_post = [];
            Gapdur_pre = [];
            try
                Gapdur_post = SongDat.AllOnsets(j+1) - SongDat.AllOffsets(j);
            catch err
            end
            try
                Gapdur_pre = SongDat.AllOnsets(j) - SongDat.AllOffsets(j-1);
            catch err
            end
            
            % --- song file/time information
            fs=NeurDat.metaDat(1).fs;
            globalOnsetTime=SongDat.AllOnsets(j); % sec
            globalOffsetTime = SongDat.AllOffsets(j);
            
            cumOnsSamps=cumsum([0 NeurDat.metaDat.numSamps]);
            globalOnsetSamp=globalOnsetTime*fs;
            songind=find((globalOnsetSamp-cumOnsSamps)>0, 1, 'last');
            songfname=NeurDat.metaDat(songind).filename;
            
            % ----- spiking information, multiple time bins
            onsettmp = 1000*(globalOnsetTime - Pretime);
            offsettmp = 1000*(globalOnsetTime + Posttime);
            
            inds = NeurDat.spikes_cat.cluster_class(:,2) > onsettmp ...
                & NeurDat.spikes_cat.cluster_class(:,2) < offsettmp ...
                & NeurDat.spikes_cat.cluster_class(:,1) == datstruct.clustnum;
            Spktimes_relonset = NeurDat.spikes_cat.cluster_class(inds, 2) - ...
                onsettmp;
            Spktimes_relonset = Spktimes_relonset/1000; % seconds
            
            % bin the spike times
            binedges = 0:Binsize:(Pretime+Posttime);
            [Bincounts] = histc(Spktimes_relonset, binedges);
            % --- troubleshooting using old method
            % Bincounts = zeros(1, 13);
            % Yspks = {Spktimes_relonset};
            % window_fr = 0.025;
            % windshift_fr = 0.025;
            %         [xbin, ~, ~, ymean_hz, ysem_hz, ~, ystd_hz] = ...
            %         lt_neural_plotRastMean(Yspks, window_fr, windshift_fr, 0, '');
            % Bincounts(1:length(ymean_hz)) = ymean_hz;
            
            
            % =================== OUTPUT
            counter = counter +1;
            VOCALSTRUCT.data_vocalrend(counter).syl = syl;
            VOCALSTRUCT.data_vocalrend(counter).presyl = presyl;
            VOCALSTRUCT.data_vocalrend(counter).postsyl = postsyl;
            
            VOCALSTRUCT.data_vocalrend(counter).pre_ten_syls = pre_ten_syls;
            VOCALSTRUCT.data_vocalrend(counter).post_ten_syls = post_ten_syls;
            VOCALSTRUCT.data_vocalrend(counter).syldur = Syldur;
            VOCALSTRUCT.data_vocalrend(counter).Gapdur_post = Gapdur_post;
            VOCALSTRUCT.data_vocalrend(counter).Gapdur_pre = Gapdur_pre;
            VOCALSTRUCT.data_vocalrend(counter).globalOnsetTime = globalOnsetTime;
            VOCALSTRUCT.data_vocalrend(counter).globalOffsetTime = globalOffsetTime;
            VOCALSTRUCT.data_vocalrend(counter).songind = songind;
            VOCALSTRUCT.data_vocalrend(counter).songfname = songfname;
            VOCALSTRUCT.data_vocalrend(counter).Spktimes_relonset = Spktimes_relonset;
            if size(Bincounts,2)>1
            VOCALSTRUCT.data_vocalrend(counter).Spk_bincounts = Bincounts';
           
            if size(Bincounts,2)>1
                keyboard
            end
            
            
            VOCALSTRUCT.global.binedges = binedges;
            VOCALSTRUCT.global.pretime = Pretime;
            VOCALSTRUCT.global.posttime = Posttime;
            VOCALSTRUCT.global.fs = fs;
            VOCALSTRUCT.global.bincenters = binedges+Binsize/2;
        end
        
        
        % ===== COMBINE ACROSS NERUONS
        
        % ==== COMBINE ACROSS BIRD
        
        toc
        %% ==== PLOT
        
        if plotRaw==1
        lt_figure; hold on;
        timebin = 5;
        plotMean = 0;
        
        % ==== 1) for single time bin, single neuron, plot data
        lt_subplot(2,1,1); hold on;
        title('ignoring context');
        ylabel('spks/bin');
        
        % x axis for syl, vary color for sequence (1-back)
        syltypes = unique({VOCALSTRUCT.data_vocalrend.syl});
        for i=1:length(syltypes)
            syl = syltypes{i};
            inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl);
            
            if sum(inds)<mindattoplot
                continue % not enough samples
            end
            
            tmp = {VOCALSTRUCT.data_vocalrend(inds).Spk_bincounts};
            SpkCntMat = cell2mat(tmp');
            
            % -- extract each trial dat
            Y = SpkCntMat(:, timebin);
            X = i;
            
            if plotMean ==1
                lt_plot(X, mean(Y), {'Errors', lt_sem(Y), 'Color', 'k'});
            else
                distributionPlot(Y, 'xValues', X, 'addSpread', 0, 'showMM', 0);
            end
            %     plot(X, Y, 'o');
        end
        lt_plot_zeroline;
        
        
        
        % ==== 2) for single time bin, single neuron, plot data [including sequence
        % info]
        lt_subplot(2,1,2); hold on;
        title('colors = context');
        xlabel('syl');
        ylabel('spks/bin');
        
        % x axis for syl, vary color for sequence (1-back)
        syltypes = unique({VOCALSTRUCT.data_vocalrend.syl});
        plotcols = lt_make_plot_colors(length(syltypes), 0, 0);
        
        for i=1:length(syltypes)
            syl = syltypes{i};
            %     inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl);
            
            % --- break out into preceding syl
            for ii=1:length(syltypes)
                sylpre = syltypes{ii};
                
                inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl) & ...
                    strcmp({VOCALSTRUCT.data_vocalrend.presyl}, sylpre);
                
                if sum(inds)<mindattoplot
                    continue % not enough samples
                end
                
                tmp = {VOCALSTRUCT.data_vocalrend(inds).Spk_bincounts};
                SpkCntMat = cell2mat(tmp');
                
                % -- extract each trial dat
                Y = SpkCntMat(:, timebin);
                X = i + 0.3-0.6*rand;
                
                if plotMean==1
                    lt_plot(X, mean(Y), {'Errors', lt_sem(Y), 'Color', plotcols{ii}});
                    lt_plot_text(X+0.01, mean(Y), sylpre, plotcols{ii});
                else
                    distributionPlot(Y, 'xValues', X, 'addSpread', 0, 'color', plotcols{ii}, ...
                        'distWidth', 0.4, 'showMM', 0);
                    %     distributionPlot(Y, 'xValues', X, 'addSpread', 0, 'color', plotcols{ii});
                end
                %     plot(X, Y, 'o');
            end
        end
        lt_plot_zeroline;
        set(gca, 'XTick', 1:length(syltypes), 'XTickLabel', syltypes);
        
        
        %% =============== PLOT RUNNING TIMECOURSE
        
        % ==== 2) for single time bin, single neuron, plot data [including sequence
        % info]
        figcount=1;
        subplotrows=8;
        subplotcols=3;
        fignums_alreadyused=[];
        hfigs=[];
        
        % x axis for syl, vary color for sequence (1-back)
        syltypes = unique({VOCALSTRUCT.data_vocalrend.syl});
        plotcols = lt_make_plot_colors(length(syltypes), 0, 0);
        
        for i=1:length(syltypes)
            syl = syltypes{i};
            %     inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl);
            [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
            title(['to ' syl]);
            
            % --- break out into preceding syl
            for ii=1:length(syltypes)
                sylpre = syltypes{ii};
                
                inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl) & ...
                    strcmp({VOCALSTRUCT.data_vocalrend.presyl}, sylpre);
                
                if sum(inds)<mindattoplot
                    continue % not enough samples
                end
                
                if (0)
                    SpkCntMat = reshape([VOCALSTRUCT.data_vocalrend(inds).Spk_bincounts], sum(inds), ...
                        length(VOCALSTRUCT.global.binedges)); % collect all into matrix of spk counts (N x bins)
                else
                    tmp = {VOCALSTRUCT.data_vocalrend(inds).Spk_bincounts};
                    SpkCntMat = cell2mat(tmp');
                end
                
                % -- extract each trial dat
                Y = mean(SpkCntMat, 1);
                X = VOCALSTRUCT.global.binedges(1:end)+Binsize/2;
                
                plot(X, Y./Binsize, 'Color', plotcols{ii});
                
                line([VOCALSTRUCT.global.pretime VOCALSTRUCT.global.pretime], ylim ,'Color', 'k')
            end
        end
        lt_plot_zeroline;
        set(gca, 'XTick', 1:length(syltypes), 'XTickLabel', syltypes);
        
        
        %% =============== PLOT RUNNING TIMECOURSE [smoothing]
        if (0)
            % ==== 2) for single time bin, single neuron, plot data [including sequence
            % info]
            figcount=1;
            subplotrows=8;
            subplotcols=3;
            fignums_alreadyused=[];
            hfigs=[];
            
            % x axis for syl, vary color for sequence (1-back)
            syltypes = unique({VOCALSTRUCT.data_vocalrend.syl});
            plotcols = lt_make_plot_colors(length(syltypes), 0, 0);
            
            for i=1:length(syltypes)
                syl = syltypes{i};
                %     inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl);
                [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
                title(['to ' syl]);
                
                % --- break out into preceding syl
                for ii=1:length(syltypes)
                    sylpre = syltypes{ii};
                    
                    inds = strcmp({VOCALSTRUCT.data_vocalrend.syl}, syl) & ...
                        strcmp({VOCALSTRUCT.data_vocalrend.presyl}, sylpre);
                    
                    if sum(inds)<mindattoplot
                        continue % not enough samples
                    end
                    
                    Yspks = {VOCALSTRUCT.data_vocalrend(inds).Spktimes_relonset};
                    
                    window_fr = 0.04;
                    windshift_fr = 0.002;
                    [xbin, ~, ~, ymean_hz, ysem_hz, ~, ystd_hz] = ...
                        lt_neural_plotRastMean(Yspks, window_fr, windshift_fr, 0, '');
                    
                    shadedErrorBar(xbin, ymean_hz, ysem_hz, {'Color', plotcols{ii}}, 1);
                    
                    line([VOCALSTRUCT.global.pretime VOCALSTRUCT.global.pretime], ylim ,'Color', 'k')
                end
            end
            lt_plot_zeroline;
            set(gca, 'XTick', 1:length(syltypes), 'XTickLabel', syltypes);
            
        end
        end
        
        %% ==================== ANOVA
        numtimebins = length(VOCALSTRUCT.global.bincenters);
        ANOVAOUTPUT = struct;
        for i=1:numtimebins
            
            % ==========
            tmp = {VOCALSTRUCT.data_vocalrend.Spk_bincounts};
            SpkCntMat = cell2mat(tmp');
            SpkCnts = SpkCntMat(:, i);
            
            Syl = [VOCALSTRUCT.data_vocalrend.syl]';
            Presyl = [VOCALSTRUCT.data_vocalrend.presyl]';
            
            % ------ 1) LME model
            X = table(SpkCnts, Syl, Presyl);
            
            modelform = 'SpkCnts ~ 1 + Syl + Presyl';
            lme = fitlme(X, modelform);
            
            % ----- 2) ANOVA
            Groupnames = {'Syl', 'Presyl'};
            Group{1} = Syl;
            Group{2} = Presyl;
            [p, tabletmp] = anovan(SpkCnts, Group, 'display', 'off');
            
            numgroups = length(Group);
            ss_total = tabletmp{3+numgroups,2};
            ms_error = tabletmp{2+numgroups,5};
            
            Eta2_all = [];
            Omega2_all = [];
            
            for j=1:numgroups
                ss_effect = tabletmp{1+j,2};
                df_effect = tabletmp{1+j,3};
                
                numerator = ss_effect - df_effect*ms_error;
                denominator = ss_total + ms_error;
                omega2 = numerator/denominator;
                eta2 = ss_effect/ss_total;
                
                Eta2_all = [Eta2_all eta2];
                Omega2_all = [Omega2_all omega2];
            end
            
            ANOVAOUTPUT.timebin(i).Eta2_all = Eta2_all;
            ANOVAOUTPUT.timebin(i).Omega2_all = Omega2_all;
            ANOVAOUTPUT.global.Groupnames = Groupnames;
        end
        
        
        % =================== PLOT ANOVA RESULTS
%         lt_figure; hold on;
        tmp = {ANOVAOUTPUT.timebin.Omega2_all};
        OmegaAcrossBins = cell2mat(tmp');
        
        numgroups = length(ANOVAOUTPUT.global.Groupnames);
        plotcols = lt_make_plot_colors(length(Groupnames), 0,0);
        for i=1:numgroups
            groupname = ANOVAOUTPUT.global.Groupnames{i};
            
            omegavals = OmegaAcrossBins(:,i);
            xvals = VOCALSTRUCT.global.bincenters;
            
            plot(xvals, omegavals, '-', 'Color' ,plotcols{i});
        end
        legend(gca, Groupnames);
        line([VOCALSTRUCT.global.pretime VOCALSTRUCT.global.pretime], ylim, 'Color', 'k');
        
        
    end
end











