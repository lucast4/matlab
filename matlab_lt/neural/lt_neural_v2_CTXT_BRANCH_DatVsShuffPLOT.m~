function DATSTRUCT = lt_neural_v2_CTXT_BRANCH_DatVsShuffPLOT(analyfname)
%% lt 11/29/17 - modified to not use CLASSES (Which takes up al lot of memory ...)


%% lt 10/27/17 - plots CLASSES, after runninglt_neural_v2_CTXT_BRANCH_DatVsShuff
% - plots decoding of dat vs. shuffled
% - currently only works with one time bin (the first) - can easily modify
% to plot multiple time bins.

%%

decodestat = 'F1';
plotdecodenegdistr = 0; % will plot each neuron/branch neg and actual dat (lots of plots!!!)

%% load branch
savedir = '/bluejay5/lucas/analyses/neural/CTXT_ClassGeneral_M';

% load([savedir '/CLASSESv2_' analyfname '.mat']);
load([savedir '/ALLBRANCHv2_' analyfname '.mat']);
load([savedir '/SUMMARYv2_' analyfname '.mat']);
try
    load([savedir '/PARAMSv2_' analyfname '.mat']);
catch err
end

%% ======= Filter data (e.g. remove noise, poor labels, etc)

Params.LocationsToKeep = {};
Params.birdstoexclude = {};
Params.RemoveRepeats = 0; % Removes if, for any class in branch, presyl is same as token (e.g. a(a)a)
Params.durThreshOmega.syl = []; % omega2 (will only keep if lower) [leave empty to ignore]
Params.durThreshOmega.gappre= [];
Params.durThreshOmega.gappost= [];
Params.GapDurPreMax = 0.5; % then will throw out if median pregap dur (for any
% class within branch) is longer than this (sec)
Params.RemoveHandCoded =1 ; % see below

ALLBRANCH = lt_neural_v2_CTXT_BranchFilter(ALLBRANCH, Params);

%% ========= COMPUILE BY ACTUAL BRANCH IDS (based on regexp str)
apos =1;
DATSTRUCT_BYBRANCH = lt_neural_v2_CTXT_BRANCH_OrgByBranchID(ALLBRANCH);



%% use first time bin only (can modify)

tt = 1;
apos = 1; % align pos = 1
%% COLLECT


% ---- to visualize decodeneg distributions
figcount=1;
subplotrows=8;
subplotcols=3;
fignums_alreadyused=[];
hfigs=[];


AllPdat = [];
AllBirdNum = [];
AllNeurNum = [];
AllBranchNum = [];
AllDecode = [];
AllDecode_z = [];

AllWindows_RelOnsActual = [];
AllWindows_RelOnsOffDesired = [];

numbirds = length(ALLBRANCH.alignpos(apos).bird);

% ------------ load decode param
timewindows = load([savedir '/' analyfname '/SHUFFDECODE/Params.mat']);

            
for i=1:numbirds
  
    numbranches = length(ALLBRANCH.alignpos(apos).bird(i).branch);
    for bb = 1:numbranches
       
        numneurons = length(ALLBRANCH.alignpos(apos).bird(i).branch(bb).neuron);
        
        for nn=1:numneurons
           
            ALLBRANCH.alignpos(apos).bird(i).branch(bb).neuron(nn);
            
            % ------------ 
            disp(['brd' num2str(i) '-br' num2str(bb) '-neur' num2str(nn)]);

            % ------------ find shuffle decode data
            fname = [savedir '/' analyfname '/SHUFFDECODE/' ...
                'bird' num2str(i) '_neur' num2str(nn) '_branch' num2str(bb) ...
                '_tbin' num2str(tt) '.mat'];
            if ~exist(fname, 'file')
            disp('skipping - no decode dat');
            continue
            else
            decodestruct = load(fname);
            end
            
            
            % === other features
            AllBirdNum = [AllBirdNum; i];
            AllNeurNum = [AllNeurNum; nn];
            AllBranchNum = [AllBranchNum; bb];

            % === Pdats
            AllPdat = [AllPdat; decodestruct.decodestruct.Pdat];

            % === convert decode into z-score rel to null distribution
            cmat = decodestruct.decodestruct.ConfMatAll_NEG ;
            decodeneg = [];
            for j=1:length(cmat)
                sts = lt_neural_ConfMatStats(cmat{j});
                decodeneg = [decodeneg sts.(decodestat)];
            end
            
            % --- same, data
            cmat = decodestruct.decodestruct.ConfMatAll_DAT;
            decodedat = [];
            for j=1:length(cmat)
                sts = lt_neural_ConfMatStats(cmat{j});
                decodedat = [decodedat sts.(decodestat)];
            end
            decode = mean(decodedat);

            
            % ################################# OUTPUT
            AllDecode = [AllDecode decode];
            
            nullmean = mean(decodeneg);
            nullstd = std(decodeneg);
            AllDecode_z = [AllDecode_z (decode - nullmean)/nullstd];

            
            % --------------------------- check neg decode distrubtions
            if plotdecodenegdistr ==1
                [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
                lt_plot_histogram(decodeneg);
                line([decode decode], ylim, 'Color','r')
            end
            
                        
            % ----------------- other params
            windowrelonset = decodestruct.decodestruct.window_relonset;
            AllWindows_RelOnsActual = [AllWindows_RelOnsActual; windowrelonset];
            
            windowrelOnsOff = timewindows.TimeWindows;
            AllWindows_RelOnsOffDesired = [AllWindows_RelOnsOffDesired; windowrelOnsOff];
        end
    end
end


%% plot grand histogram
for i=1:size(AllPdat,2)
    lt_figure; hold on;
    xlabel('log10(pval)');
    title(['prob of dat rel shuff distribution, ' analyfname]);
    lt_plot_histogram(log10(AllPdat(:,i)+0.0001));
    line([log10(0.05) log10(0.05)], ylim);
    
    numSig = sum(AllPdat(:)<0.05);
    numTot = length(AllPdat(:));
    
    lt_plot_annotation(1, [num2str(numSig) '/' num2str(numTot) ' (' num2str(numSig/numTot) ') sig (p<0.05)'])
end

%% pval correlate with zscore
lt_figure; hold on;
    title([analyfname]);
xlabel('zscore vs. null');
ylabel('pval');
plot(AllDecode_z, AllPdat, '.k');


%% -- separate plot for each bird, separated by neuron num
numbirds = max(AllBirdNum);
numneur = max(AllNeurNum);
numbranch = max(AllBranchNum);

figcount=1;
subplotrows=4;
subplotcols=2;
fignums_alreadyused=[];
hfigs=[];


% ################### PVAL
for i=1:numbirds
    
    Yvals = {};
    XNeurs = [];
    birdname = SummaryStruct.birds(i).birdname;
    for ii=1:numneur
        
        inds = AllBirdNum==i & AllNeurNum==ii;
        
        if ~any(inds)
            continue
        end
        
        % ==== extract all p-vals for this bird/neuron (i.e. across
        % branches)
        Yvals = [Yvals log10(AllPdat(inds)+0.0001)];
        XNeurs = [XNeurs ii];
    end
    
    % =========== plot for this bird
    [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
    title(birdname);
    xlabel('neur num');
    ylabel('log10(prob)');
    lt_plot_MultDist(Yvals, XNeurs, 1, 'k', 1, 0);
    line(xlim, [log10(0.05) log10(0.05)], 'Color','r');
    ylim([-5 1]);
    
    % -------- proportion of cases overall significant
    yvalsall = cell2mat(Yvals');
    
    numSig = sum(yvalsall(:)<log10(0.05));
    numTot = length(yvalsall(:));
    
    lt_plot_annotation(1, [num2str(numSig) '/' num2str(numTot) ' (' num2str(numSig/numTot) ') sig (p<0.05)'], 'r')

    
end


% ################### DECODE (zscore)
figcount=1;
subplotrows=4;
subplotcols=2;
fignums_alreadyused=[];
hfigs=[];

for i=1:numbirds
    
    Yvals = {};
    XNeurs = [];
    birdname = SummaryStruct.birds(i).birdname;
    for ii=1:numneur
        
        inds = AllBirdNum==i & AllNeurNum==ii;
        
        if ~any(inds)
            continue
        end
        
        % ==== extract all p-vals for this bird/neuron (i.e. across
        % branches)
        Yvals = [Yvals AllDecode_z(inds)];
        XNeurs = [XNeurs ii];
    end
    
    % =========== plot for this bird
    [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
    title(birdname);
    xlabel('neur num');
    ylabel('decode (zscore)');
    lt_plot_MultDist(Yvals, XNeurs, 1, 'k', 1, 0);
    %     line(xlim, [log10(0.05) log10(0.05)], 'Color','r');
    %     ylim([-5 1]);
    lt_plot_zeroline;
    
end




%% -- separate plot for each bird, separated by branch num
numbirds = max(AllBirdNum);
numneur = max(AllNeurNum);
numbranch = max(AllBranchNum);

figcount=1;
subplotrows=4;
subplotcols=2;
fignums_alreadyused=[];
hfigs=[];


% ############################# PVAL
BranchnameAll = {};
for i=1:numbirds
    
    Yvals = {};
    Xbranch = [];
    Nnums = {}; % to collect neurons
    birdname = SummaryStruct.birds(i).birdname;
    
    for ii=1:numbranch
        
        inds = AllBirdNum==i & AllBranchNum==ii;
        
        if ~any(inds)
            continue
        end
        
        % ==== extract all p-vals for this bird/branch (i.e. across
        % branches)
        Yvals = [Yvals log10(AllPdat(inds)+0.0001)];
        Xbranch = [Xbranch ii];
        
        % --- what is the name of this branch?
        tmp = find(inds);
%         branchname = CLASSES.birds(i).neurons(AllNeurNum(tmp(1))).branchnum(ii).regexprstr;
        branchname = ALLBRANCH.alignpos(apos).bird(i).branch(ii).neuron(AllNeurNum(tmp(1))).prms_regexpstr;
        BranchnameAll = [BranchnameAll branchname];
        
        
        % ------------ plot text of neurons for each datapoint
        Nnums = [Nnums AllNeurNum(inds)];
    end
    % =========== plot for this bird
    [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
    title(birdname);
    xlabel('branch ID');
    ylabel('log10(prob)');
    
    % ------------- plot text of neuron num next to point
    for j=1:length(Nnums)
       for jj = 1:length(Nnums{j})
           
           neur = Nnums{j}(jj);
           x = j;
           y = Yvals{j}(jj);
           lt_plot_text(x, y, [num2str(neur)], [0.6 0.6 0.9])
        end
    end
    
    % -------- plot data
    lt_plot_MultDist(Yvals, Xbranch, 1, 'k', 1, 0);
    line(xlim, [log10(0.05) log10(0.05)], 'Color','r');
    ylim([-5 1]);
    
    set(gca, 'XTickLabel', BranchnameAll);
    rotateXLabels(gca, 45);
    
    
    % -------- proportion of cases overall significant
    yvalsall = cell2mat(Yvals');
    
    numSig = sum(yvalsall(:)<log10(0.05));
    numTot = length(yvalsall(:));
    
    lt_plot_annotation(1, [num2str(numSig) '/' num2str(numTot) ' (' num2str(numSig/numTot) ') sig (p<0.05)'], 'r')

    
end


% ############################# DECODE (ZSCORE)
figcount=1;
subplotrows=4;
subplotcols=2;
fignums_alreadyused=[];
hfigs=[];


BranchnameAll = {};
for i=1:numbirds
    
    Yvals = {};
    Xbranch = [];
    birdname = SummaryStruct.birds(i).birdname;
    
    for ii=1:numbranch
        
        inds = AllBirdNum==i & AllBranchNum==ii;
        
        if ~any(inds)
            continue
        end
        
        % ==== extract all p-vals for this bird/branch (i.e. across
        % branches)
        Yvals = [Yvals AllDecode_z(inds)];
        Xbranch = [Xbranch ii];
        
        % --- what is the name of this branch?
        tmp = find(inds);
        branchname = ALLBRANCH.alignpos(apos).bird(i).branch(ii).neuron(AllNeurNum(tmp(1))).prms_regexpstr;
        BranchnameAll = [BranchnameAll branchname];
    end
    % =========== plot for this bird
    [fignums_alreadyused, hfigs, figcount, hsplot]=lt_plot_MultSubplotsFigs('', subplotrows, subplotcols, fignums_alreadyused, hfigs, figcount);
    title(birdname);
    xlabel('branch ID');
    ylabel('decode (z)');
    lt_plot_MultDist(Yvals, Xbranch, 1, 'k', 1, 0);
    lt_plot_zeroline;
    
    set(gca, 'XTickLabel', BranchnameAll);
    rotateXLabels(gca, 45);
    
end


%% -- separate plot for each bird, matrix of neuron x branch
numbirds = max(AllBirdNum);
numneur = max(AllNeurNum);
numbranch = max(AllBranchNum);

figcount=1;
subplotrows=4;
subplotcols=2;
fignums_alreadyused=[];
hfigs=[];



for i=1:numbirds
    
    for ii=1:numbranch
        
        
    end
    
end




%% =========== for output

DATSTRUCT.AllPdat = AllPdat;
DATSTRUCT.AllBirdNum = AllBirdNum;
DATSTRUCT.AllNeurNum = AllNeurNum;
DATSTRUCT.AllBranchNum = AllBranchNum;
DATSTRUCT.AllDecode = AllDecode;
DATSTRUCT.AllDecode_z = AllDecode_z;
DATSTRUCT.AllWindows_RelOnsActual =AllWindows_RelOnsActual;
DATSTRUCT.AllWindows_RelOnsOffDesired = AllWindows_RelOnsOffDesired;







